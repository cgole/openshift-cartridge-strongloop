{
  "name": "nexpect",
  "description": "Spawns and interacts with child processes using spawn / expect commands",
  "version": "0.4.0",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "indexzero",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "AvianFlu",
      "email": "avianflu@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/nodejitsu/nexpect.git"
  },
  "keywords": [
    "nexpect",
    "spawn",
    "child process",
    "terminal"
  ],
  "devDependencies": {
    "colors": "0.x.x",
    "prompt": "~0.2.11",
    "vows": "~0.5.x"
  },
  "main": "./lib/nexpect",
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "# nexpect\n\n`nexpect` is a node.js module for spawning child applications (such as ssh) and\nseamlessly controlling them using javascript callbacks. nexpect is based on the\nideas of the [expect][0] library by Don Libes and the [pexpect][1] library by\nNoah Spurrier.\n\n## Motivation\n\nnode.js has good built in control for spawning child processes. `nexpect` builds\non these core methods and allows developers to easily pipe data to child\nprocesses and assert the expected response. `nexpect` also chains, so you can\ncompose complex terminal interactions.\n\n## Installation\n\n``` bash\n  $ npm install --save nexpect\n```\n\n## Usage\n\n### require('nspawn')\n\nThe module exposes a single function, `.spawn`.\n\n### function spawn (command, [params], [options])\n\n* command {string|Array} The command that you wish to spawn, a string will be\n  split on `' '` to find the params if params not provided (so do not use the\n  string variant if any arguments have spaces in them)\n* params {Array} **Optional** Argv to pass to the child process\n* options {Object} **Optional** An object literal which may contain\n  - cwd: Current working directory of the child process.\n  - env: Environment variables for the child process.\n  - ignoreCase: Ignores the case of any output from the child process.\n  - stripColors: Strips any ANSI colors from the output for `.expect()` and `.wait()` statements.\n  - stream: Expectations can be written against stdout, or stderr, but not both\n    (defaults to 'stdout')\n  - verbose: Writes the stdout for the child process to `process.stdout` of the current process,\n    and any data sent with sendline to the `process.stdout` of the current\n    process.\n\n\nTop-level entry point for `nexpect` that liberally parses the arguments\nand then returns a new chain with the specified `command`, `params`, and `options`.\n\n### function expect (expectation)\n\n* expectation {string|RegExp} Output to assert on the target stream\n\nExpect that the next line of output matches the expectation.\nThrow an error if it does not.\n\nThe expectation can be a string (the line should contain the expected value as\na substring) or a RegExp (the line should match the expression).\n\n### function wait (expectation)\n\n* expectation {string|RegExp} Output to assert on the target stream\n\nWait for a line of output that matches the expectation, discarding lines\nthat do not match.\n\nThrow an error if no such line was found.\n\nThe expectation can be a string (the line should contain the expected value as\na substring) or a RegExp (the line should match the expression).\n\n### function sendline (line)\n\n* line {string} Output to write to the child process.\n\nAdds a write line to `context.process.stdin` to the `context.queue`\nfor the current chain.\n\n### function sendEof ()\n\nClose child's stdin stream, let the child know there are no more data coming.\n\nThis is useful for testing apps that are using inquirer,\nas `inquirer.prompt()` calls `stdin.resume()` at some point,\nwhich causes the app to block on input when the input stream is a pipe.\n\n### function run (callback)\n\n* callback {function} Called when child process closes, with arguments\n  * err {Error|null} Error if any occurred\n  * output {Array} Array of lines of output examined\n  * exit {Number|String} Numeric exit code, or String name of signal\n\nRuns the `context` against the specified `context.command` and\n`context.params`.\n\n\n## Example\n\nLets take a look at some sample usage:\n\n``` js\n  var nexpect = require('nexpect');\n\n  nexpect.spawn(\"echo\", [\"hello\"])\n         .expect(\"hello\")\n         .run(function (err, stdout, exitcode) {\n           if (!err) {\n             console.log(\"hello was echoed\");\n           }\n         });\n\n  nexpect.spawn(\"ls -la /tmp/undefined\", { stream: 'stderr' })\n         .expect(\"No such file or directory\")\n         .run(function (err) {\n           if (!err) {\n             console.log(\"checked that file doesn't exists\");\n           }\n         });\n\n  nexpect.spawn(\"node --interactive\")\n         .expect(\">\")\n         .sendline(\"console.log('testing')\")\n         .expect(\"testing\")\n         .sendline(\"process.exit()\")\n         .run(function (err) {\n           if (!err) {\n             console.log(\"node process started, console logged, process exited\");\n           }\n           else {\n             console.log(err)\n           }\n         });\n```\n\nIf you are looking for more examples take a look at the [examples][2], and [tests][3].\n\n## Tests\n\nAll tests are written with [vows][4]:\n\n``` bash\n  $ npm test\n```\n\n## Authors\n\n[Elijah Insua][5] [Marak Squires][6], and [Charlie Robbins][7].\n\n[0]: http://search.cpan.org/~rgiersig/Expect-1.21/Expect.pod\n[1]: http://pexpect.sourceforge.net/pexpect.html\n[2]: https://github.com/nodejitsu/nexpect/tree/master/examples\n[3]: https://github.com/nodejitsu/nexpect/tree/master/test/nexpect-test.js\n[4]: http://vowsjs.org\n[5]: http://github.com/tmpvar\n[6]: http://github.com/marak\n[7]: http://github.com/indexzero\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nodejitsu/nexpect/issues"
  },
  "homepage": "https://github.com/nodejitsu/nexpect",
  "_id": "nexpect@0.4.0",
  "_shasum": "769dbd853b997ab20d013f49cec481ee143cf6d7",
  "_resolved": "git+https://github.com/strongloop/nexpect#8b404a80b3b757fdb2943fcccf93a4c6e942d1a9",
  "_from": "nexpect@git+https://github.com/strongloop/nexpect"
}
